import { NextRequest, NextResponse } from 'next/server';\n\n/**\n * Desktop Helper Status API Endpoint\n * \n * Checks the connection status and capabilities of the desktop helper application\n */\nexport async function GET(request: NextRequest) {\n  try {\n    const status = await checkDesktopHelperConnection();\n    \n    return NextResponse.json({\n      connected: status.connected,\n      version: status.version,\n      capabilities: status.capabilities,\n      lastCheck: new Date().toISOString(),\n      endpoint: 'http://localhost:8765'\n    });\n\n  } catch (error) {\n    console.error('Desktop status check error:', error);\n    \n    return NextResponse.json(\n      {\n        connected: false,\n        error: 'Failed to check desktop helper status',\n        details: error instanceof Error ? error.message : 'Unknown error',\n        lastCheck: new Date().toISOString()\n      },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * Check desktop helper connection and capabilities\n */\nasync function checkDesktopHelperConnection(): Promise<{\n  connected: boolean;\n  version?: string;\n  capabilities?: string[];\n  error?: string;\n}> {\n  try {\n    // Attempt to connect to desktop helper service\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 5000);\n\n    const response = await fetch('http://localhost:8765/status', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'User-Agent': 'sparka-ohfixit/1.0'\n      },\n      signal: controller.signal\n    });\n\n    clearTimeout(timeoutId);\n\n    if (!response.ok) {\n      return {\n        connected: false,\n        error: `HTTP ${response.status}: ${response.statusText}`\n      };\n    }\n\n    const data = await response.json();\n    \n    return {\n      connected: true,\n      version: data.version || 'unknown',\n      capabilities: data.capabilities || [\n        'screenshot',\n        'system_info',\n        'process_list',\n        'file_operations'\n      ]\n    };\n\n  } catch (error) {\n    if (error instanceof Error && error.name === 'AbortError') {\n      return {\n        connected: false,\n        error: 'Connection timeout - desktop helper not responding'\n      };\n    }\n\n    return {\n      connected: false,\n      error: error instanceof Error ? error.message : 'Unknown connection error'\n    };\n  }\n}
